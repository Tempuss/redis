version: '3.3'

services:
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=str0ng_passw0rd
    networks:
      - app-tier
    ports:
      - '6379'

  redis-slave:
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - REDIS_MASTER_PASSWORD=str0ng_passw0rd
      - REDIS_PASSWORD=str0ng_passw0rd
    ports:
      - '6379'
    depends_on:
      - redis
    networks:
      - app-tier

  redis-sentinel:
    image: 'bitnami/redis-sentinel:latest'
    environment:
      - REDIS_MASTER_PASSWORD=str0ng_passw0rd
    depends_on:
      - redis
      - redis-slave
    ports:
      - '26379-26381:26379'
    networks:
      - app-tier

#3
#services:
#  redis-master:
#    image: redis:5.0.6-alpine   # image 옵션으로 redis공식이미지를 기반으로 생성합니다.
#    container_name: redis-master
#    build:
#      context: compose/redis             # build file에 대한 context를 지정
#      dockerfile: Dockerfile
#    networks:
#      - any-network-dev
#    environment:              # Container 내부에서 사용 할 환경변수를 설정합니다.
#      - REQUIREPASS=password1234
#      - CLIENTPORT=6379
#      - CLIENTHOST=redis-master
#      - MASTERHOST=
#      - MASTERPORT=
#    restart: always
#
#  redis-slave1:
#    image: redis:5.0.6-alpine
#    container_name: redis-slave-1
#    build:
#      context: compose/redis             # build file에 대한 context를 지정
#      dockerfile: Dockerfile
#    networks:
#      - any-network-dev
#    environment:
#      - REQUIREPASS=password1234
#      - CLIENTPORT=6379
#      - MASTERPORT=6379
#      - CLIENTHOST=redis-slave-1
#      - MASTERHOST=redis-master
#    volumes:
#      - "../redis-data/redis2:/data"
#    restart: always
#
#  redis-slave2:
#    image: redis:5.0.6-alpine
#    container_name: redis-slave-2
#    build:
#      context: compose/redis             # build file에 대한 context를 지정
#      dockerfile: Dockerfile
#    networks:
#      - any-network-dev
#    environment:
#      - REQUIREPASS=password1234
#      - CLIENTPORT=6379
#      - MASTERPORT=6379
#      - CLIENTHOST=redis-slave-2
#      - MASTERHOST=redis-master
#    restart: always
#  master-redis:
#    #build:
#      # context 경로와 도커파일 경로가 안맞으면 COPY 안됨
#      #context: compose/redis
#      #dockerfile: Dockerfile
#    image: redis:5.0.6-alpine
#    container_name: master-redis
#    env_file:
#      - ./.envs/.master_redis
#    #environment:
#    #  - CLIENTPORT=6379
#    restart: always
#    network_mode: "host"
#    logging:
#      driver: json-file
#      options:
#        max-size: "100m"
#        max-file: "5"

#  slave-redis1:
#    build:
#      # context 경로와 도커파일 경로가 안맞으면 COPY 안됨
#      context: compose/redis
#      dockerfile: Dockerfile
#    container_name: slave-redis1
#    env_file:
#      - ./.envs/.slave_redis1
#    environment:
#      - CLIENTPORT=6380
#    ports:
#      - "6380:6380"
#    restart: always
#    network_mode: "host"
#    logging:
#      driver: json-file
#      options:
#        max-size: "100m"
#        max-file: "5"
#
#  slave-redis2:
#    build:
#      # context 경로와 도커파일 경로가 안맞으면 COPY 안됨
#      context: compose/redis
#      dockerfile: Dockerfile
#    container_name: slave-redis2
#    env_file:
#      - ./.envs/.slave_redis2
#    environment:
#      - CLIENTPORT=6381
#    ports:
#      - "6381:6381"
#    restart: always
#    network_mode: "host"
#    logging:
#      driver: json-file
#      options:
#        max-size: "100m"
#        max-file: "5"

networks:
  app-tier:
    driver: bridge
  #any-network-dev:
#    network_mode: "host"

